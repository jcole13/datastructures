package main;

import java.util.InputMismatchException;

public class Calculation {
	
	public int reversePolish(String [] arr) {
		Stack reverse = new Stack();
		for(String s : arr) {
			switch(s){
				case "+": reverse.join(Integer.parseInt(reverse.leave()) + Integer.parseInt(reverse.leave()) + ""); break;
				case "*": reverse.join(Integer.parseInt(reverse.leave()) * Integer.parseInt(reverse.leave()) + ""); break;
				case "/": reverse.join(1/(Integer.parseInt(reverse.leave()) / Integer.parseInt(reverse.leave())) + ""); break;//divide by 0
				case "-": reverse.join(-(Integer.parseInt(reverse.leave()) - Integer.parseInt(reverse.leave())) + ""); break;
				default : reverse.join(s); break;
					
			} // end switch
		}
		return Integer.parseInt(reverse.leave());
	}
	
	public int infix(String[] arr) {
		if(!checkWellFormed(arr)) {
			System.out.println("Expression not well formed!");
			throw new InputMismatchException(); //change this
		}
		
		
	}
	
	public boolean checkWellFormed(String [] arr) {
		int counter = 0;
		for(String s : arr) {
			if(s.equals("(")) counter++;
			else if(s.equals(")")) counter--;
		}
		return counter==0;
	}

}
