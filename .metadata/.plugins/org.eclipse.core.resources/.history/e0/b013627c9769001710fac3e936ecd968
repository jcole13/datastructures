package main;

public class Converter {
	
	public String toInfix(String[] arr) {//goes through and consolidates a postfix expression
		Stack stack = new Stack();
		for(int i = 0; i < arr.length; i++) {
			if(!isOperator(arr[i])) stack.join(arr[i]);
			else {
				String one = stack.leave();
				String two = stack.leave();
				stack.join("(" + two + arr[i] + one + ")" );
			}
		}
		return stack.leave();
	}
	
	public String toPolish(String[] arr) {
		Stack stack = new Stack();
		String result = "";
		
		for(int i = 0; i < arr.length; i++) {
			if(!isOperator(arr[i])) result += " " + arr[i];
			else if(arr[i].equals("(")) stack.join(arr[i]);
			else if(isOperator(arr[i])) {
				while(stack.getLength() > 0 && !stack.look().equals("(")) {
					if(pemdas(stack.look()) >= pemdas(arr[i])) {
						result += " " + stack.leave();
					}
					else break;
				}
				stack.join(arr[i]);
			}
			else if (arr[i].equals(")")){
	            while ((stack.getLength() > 0) && (!stack.look().equals("("))){
	                result += " " + stack.leave();
	            }
	            if (stack.getLength() > 0)
	                stack.leave(); // popping out the left brace '('
	        }

		}
		while (stack.getLength() > 0){
	        result += " " + stack.leave();
	    }
	    result = result.replace('(', ' ');
	    //result = result.replaceAll(")", "");
	    return result;
	}
			
		/*System.out.println("x1" + stack);
		for(int i = 0; i < arr.length; i++) {
			if(!isOperator(arr[i])) {
				result += " " + arr[i];
				System.out.println(result);
			}
			else {
				while(stack.getLength() > 0 && (pemdas(arr[i]) <= pemdas(stack.look()))) {
					result += " " + stack.leave();
				}
			}
			stack.join(arr[i]);
			while(stack.getLength() > 0) result += stack.leave();
			
			
			/*else if(isOperator(arr[i]) && stack.getLength() == 0 && !stack.equals("(")) {
				stack.join(arr[i]);
				System.out.println("x" + stack);
			}
			else if(isOperator(arr[i]) && stack.getLength() > 0) {
				if(pemdas(stack.look()) > pemdas(arr[i])) {
					result += " " + stack.leave();
				}
				else {
					stack.join(arr[i]);
				}
			}*/
		
	
	private boolean isOperator(String s) {
		return (s.equals("+") || s.equals("-") || s.equals("*") || s.equals("/") || s.equals("(") ||s.equals(")"));
	}
	
	private int pemdas(String s) {
		if(s.equals("(") || s.equals(")")) return 0;
		if(s.equals("+") || s.equals("-")) return 1;
		if(s.equals("*") || s.equals("/")) return 2;
		return -1;
	}

}
